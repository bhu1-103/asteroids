AudioWorkletProcessor.prototype._N2=function(){this._O2=true;this.port.onmessage=(_P2)=>{if(_P2.data==="kill")this._O2=false;};};class _Q2 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1}];}constructor(){super();this._N2();}process(_R2,_S2,parameters){const input=_R2[0];const bypass=parameters.bypass;for(let c=0;c<input.length;++c){const _T2=input[c];for(let _U2=0;_U2<_T2.length;++_U2){const _V2=(bypass[_U2]!==undefined)?bypass[_U2]:bypass[0];
_S2[_V2][c][_U2]=_T2[_U2];}}return this._O2;}}class _W2 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"gain",automationRate:"a-rate",defaultValue:1,minValue:0}];}constructor(){super();this._N2();}process(_R2,_S2,parameters){const _X2=_R2[0];const _Y2=_R2[1];const output=_S2[0];const gain=parameters.gain;for(let c=0;c<_Y2.length;++c){const _T2=_Y2[c];const _Z2=output[c];for(let _U2=0;_U2<_T2.length;++_U2)_Z2[_U2]=_T2[_U2];}for(let c=0;c<_X2.length;++c){const _T2=_X2[c];const _Z2=output[c];
for(let _U2=0;_U2<_T2.length;++_U2){const __2=(gain[_U2]!==undefined)?gain[_U2]:gain[0];_Z2[_U2]+=_T2[_U2]*__2;}}return this._O2;}}registerProcessor("audio-bus-input",_Q2);registerProcessor("audio-bus-output",_W2);class _03 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"gain",automationRate:"a-rate",defaultValue:1.0,minValue:0.0},{name:"factor",automationRate:"a-rate",defaultValue:20,minValue:1,maxValue:100}
,{name:"resolution",automationRate:"a-rate",defaultValue:8,minValue:2,maxValue:16},{name:"mix",automationRate:"a-rate",defaultValue:0.8,minValue:0.0,maxValue:1.0}];}static _13=[undefined,undefined,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768];constructor(_23){super();this._N2();const _33=_23.outputChannelCount[0];this._43=new Float32Array(_33);this._53=new Uint32Array(_33);}process(_R2,_S2,parameters){const input=_R2[0];const output=_S2[0];const bypass=parameters.bypass;const gain=parameters.gain;
const factor=parameters.factor;const resolution=parameters.resolution;const mix=parameters.mix;for(let c=0;c<input.length;++c){const _T2=input[c];const _Z2=output[c];for(let _U2=0;_U2<_T2.length;++_U2){_Z2[_U2]=_T2[_U2];if(this._53[c]===0)this._43[c]=_T2[_U2];const _63=(factor[_U2]!==undefined)?factor[_U2]:factor[0];++this._53[c];this._53[c]%=_63;const _V2=(bypass[_U2]!==undefined)?bypass[_U2]:bypass[0];if(_V2>0.0){continue;}let _73=this._43[c];const __2=(gain[_U2]!==undefined)?gain[_U2]:gain[0];_73*=__2;_73=Math.max(Math.min(_73,
1.0),-1.0);const _83=(resolution[_U2]!==undefined)?resolution[_U2]:resolution[0];const max=(_73>0.0)?_03._13[_83]-1:_03._13[_83];_73=Math.round(_73*max)/max;const _93=(mix[_U2]!==undefined)?mix[_U2]:mix[0];_Z2[_U2]*=(1.0-_93);_Z2[_U2]+=(_73*_93);}}return this._O2;}}registerProcessor("bitcrusher-processor",_03);class _a3{constructor(_b3=1e-3){this.setTime(_b3);}setTime(_b3){this._c3=Math.exp(-1/(_b3*sampleRate));}process(_d3,_e3){return _d3+this._c3*(_e3-_d3);}}class _f3{constructor(_g3,_h3){this._i3=new _a3(_g3);
this._j3=new _a3(_h3);this._k3=_g3;this._l3=_h3;}_m3(_b3){if(_b3===this._k3)return;this._i3.setTime(_b3);this._k3=_b3;}_n3(_b3){if(_b3===this._l3)return;this._j3.setTime(_b3);this._l3=_b3;}process(_d3,_e3){if(_d3>_e3)return this._i3.process(_d3,_e3);else return this._j3.process(_d3,_e3);}}class _o3 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"ingain",automationRate:"a-rate",defaultValue:1,minValue:0}
,{name:"threshold",automationRate:"a-rate",defaultValue:0.125,minValue:1e-3,maxValue:1},{name:"ratio",automationRate:"a-rate",defaultValue:4,minValue:1},{name:"attack",automationRate:"a-rate",defaultValue:0.05,minValue:1e-3,maxValue:1e-1},{name:"release",automationRate:"a-rate",defaultValue:0.25,minValue:1e-2,maxValue:1},{name:"outgain",automationRate:"a-rate",defaultValue:1,minValue:0}];}constructor(_p3){super();this._N2();const _i3=_o3.parameterDescriptors.find(_q3=>_q3.name==="attack");const _j3=_o3.parameterDescriptors.find(_q3=>_q3.name==="release");
this._r3=new _f3(_i3.defaultValue,_j3.defaultValue);this._s3=0;}process(_t3,_u3,_v3){const input=_t3[0];const output=_u3[0];const bypass=_v3.bypass;const ingain=_v3.ingain;const outgain=_v3.outgain;const threshold=_v3.threshold;const ratio=_v3.ratio;const attack=_v3.attack;const release=_v3.release;if(input.length===0)return this._O2;for(let _U2=0;_U2<input[0].length;++_U2){let frame=input.map(_w3=>_w3[_U2]);output.forEach((_w3,_x3)=>{_w3[_U2]=frame[_x3];});const _y3=(ingain[_U2]!==undefined)?ingain[_U2]:ingain[0];
frame=frame.map(_z3=>_z3*=_y3);const rect=frame.map(_z3=>Math.abs(_z3));const max=Math.max(...rect);const _A3=_B3(max);const _C3=(threshold[_U2]!==undefined)?threshold[_U2]:threshold[0];const _D3=_B3(_C3);const _E3=Math.max(0,_A3-_D3);const _i3=(attack[_U2]!==undefined)?attack[_U2]:attack[0];const _j3=(release[_U2]!==undefined)?release[_U2]:release[0];this._r3._m3(_i3);this._r3._n3(_j3);this._s3=this._r3.process(_E3,this._s3);const _V2=(bypass[_U2]!==undefined)?bypass[_U2]:bypass[0];if(_V2>0)continue;const _83=(ratio[_U2]!==undefined)?ratio[_U2]:ratio[0];
const _F3=(this._s3/_83)-this._s3;const __2=_G3(_F3);frame=frame.map(_z3=>_z3*=__2);const _H3=(outgain[_U2]!==undefined)?outgain[_U2]:outgain[0];frame=frame.map(_z3=>_z3*=_H3);output.forEach((_w3,_x3)=>{_w3[_U2]=frame[_x3];});}return this._O2;}}function _B3(_I3){return 20*Math.log10(_I3);}function _G3(_I3){return Math.pow(10,_I3/20);}registerProcessor("compressor-processor",_o3);class _J3 extends AudioWorkletProcessor{static _K3=5.0;static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",
defaultValue:0,minValue:0,maxValue:1},{name:"time",automationRate:"a-rate",defaultValue:0.2,minValue:0.0,maxValue:_J3._K3},{name:"feedback",automationRate:"a-rate",defaultValue:0.5,minValue:0.0,maxValue:1.0},{name:"mix",automationRate:"a-rate",defaultValue:0.35,minValue:0.0,maxValue:1.0}];}constructor(_23){super();this._N2();const _33=_23.outputChannelCount[0];const _L3=(_J3._K3*sampleRate)+1;this.buffer=new Array(_33);this._M3=new Uint32Array(_33);for(let c=0;c<_33;++c)this.buffer[c]=new Float32Array(_L3);
}process(_R2,_S2,parameters){const input=_R2[0];const output=_S2[0];const bypass=parameters.bypass;const time=parameters.time;const feedback=parameters.feedback;const mix=parameters.mix;for(let c=0;c<input.length;++c){const _T2=input[c];const _Z2=output[c];for(let _U2=0;_U2<_T2.length;++_U2){_Z2[_U2]=_T2[_U2];const _C3=(time[_U2]!==undefined)?time[_U2]:time[0];const _N3=this._O3(c,_C3);const _63=(feedback[_U2]!==undefined)?feedback[_U2]:feedback[0];const _P3=_T2[_U2]+(_N3*_63);this.write(c,_P3);const _V2=(bypass[_U2]!==undefined)?bypass[_U2]:bypass[0];
if(_V2>0.0){continue;}const _93=(mix[_U2]!==undefined)?mix[_U2]:mix[0];_Z2[_U2]*=(1-_93);_Z2[_U2]+=(_N3*_93);}}return this._O2;}_O3(_Q3,_b3){const _R3=_b3*sampleRate;let _S3=(this._M3[_Q3]-~~_R3);let _T3=(_S3-1);while(_S3<0)_S3+=this.buffer[_Q3].length;while(_T3<0)_T3+=this.buffer[_Q3].length;const frac=_R3-~~_R3;const _U3=this.buffer[_Q3][_S3];const _V3=this.buffer[_Q3][_T3];return _U3+(_V3-_U3)*frac;}write(_Q3,_W3){++this._M3[_Q3];this._M3[_Q3]%=this.buffer[_Q3].length;this.buffer[_Q3][this._M3[_Q3]]=_W3;
}}registerProcessor("delay-processor",_J3);class _X3 extends AudioWorkletProcessor{static get parameterDescriptors(){return [];}constructor(){super();this._N2();}process(_Y3,_Z3,__3){const input=_Y3[0];const _04=_Z3[0];const _14=_Z3[1];for(let c=0;c<input.length;++c){const _T2=input[c];const _24=_04[c];const _34=_14[c];for(let _U2=0;_U2<_T2.length;++_U2){_24[_U2]=_T2[_U2];_34[_U2]=_T2[_U2];}}return this._O2;}}class _44 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",
defaultValue:0,minValue:0,maxValue:1}];}constructor(){super();this._N2();}process(_Y3,_Z3,__3){const _X2=_Y3[0];const _Y2=_Y3[1];const output=_Z3[0];const bypass=__3.bypass;for(let c=0;c<_Y2.length;++c){const _54=_X2[c];const _64=_Y2[c];const _Z2=output[c];for(let _U2=0;_U2<_54.length;++_U2){const _V2=(bypass[_U2]!==undefined)?bypass[_U2]:bypass[0];if(_V2>0){_Z2[_U2]=_64[_U2];}else {_Z2[_U2]=_54[_U2];}}}return this._O2;}}registerProcessor("eq-input",_X3);registerProcessor("eq-output",_44);class _74 extends AudioWorkletProcessor{
static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"gain",automationRate:"a-rate",defaultValue:0.5,minValue:0.0}];}constructor(){super();this._N2();}process(_R2,_S2,parameters){const input=_R2[0];const output=_S2[0];const bypass=parameters.bypass;const gain=parameters.gain;for(let c=0;c<input.length;++c){const _T2=input[c];const _Z2=output[c];for(let _U2=0;_U2<_T2.length;++_U2){_Z2[_U2]=_T2[_U2];const _V2=(bypass[_U2]!==undefined)?bypass[_U2]:bypass[0];
if(_V2>0.0){continue;}const __2=(gain[_U2]!==undefined)?gain[_U2]:gain[0];_Z2[_U2]*=__2;}}return this._O2;}}registerProcessor("gain-processor",_74);class _84 extends AudioWorkletProcessor{static get parameterDescriptors(){const _94=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(5000.0,_94),minValue:10.0,maxValue:_94},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,
maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_23){super();this._N2();const _33=_23.outputChannelCount[0];this._a4=0;this._b4=0;this._c4=0;this._d4=0;this._e4=0;this._f4=new Float32Array(_33);this._g4=new Float32Array(_33);this._h4=new Float32Array(_33);this._i4=new Float32Array(_33);this._j4=-1;this._k4=-1;this._l4=-1;}process(_R2,_S2,parameters){const input=_R2[0];const output=_S2[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;
const gain=parameters.gain;const _m4=(freq.length===1&&q.length===1&&gain.length===1);if(_m4)this._n4(freq[0],q[0],gain[0]);for(let c=0;c<input.length;++c){const _T2=input[c];const _Z2=output[c];for(let _U2=0;_U2<_T2.length;++_U2){if(_m4===false){const _63=(freq[_U2]!==undefined)?freq[_U2]:freq[0];const _o4=(q[_U2]!==undefined)?q[_U2]:q[0];const __2=(gain[_U2]!==undefined)?gain[_U2]:gain[0];this._n4(_63,_o4,__2);}const _p4=this._c4*_T2[_U2]+this._d4*this._f4[c]+this._e4*this._g4[c]-this._a4*this._h4[c]-this._b4*this._i4[c];
this._g4[c]=this._f4[c];this._f4[c]=_T2[_U2];this._i4[c]=this._h4[c];this._h4[c]=_p4;const _V2=(bypass[_U2]!==undefined)?bypass[_U2]:bypass[0];_Z2[_U2]=(_V2>0)?_T2[_U2]:_p4;}}return this._O2;}_n4(_q4,_r4,_s4){if(_q4===this._j4&&_r4===this._k4&&_s4===this._l4)return;const _t4=2*Math.PI*_q4/sampleRate;const _u4=Math.cos(_t4);const _v4=Math.sqrt(_s4);const _w4=_v4+1;const _x4=_v4-1;const _y4=_w4*_u4;const _z4=_x4*_u4;const _A4=_w4-_z4;const _B4=_w4+_z4;const alpha=Math.sin(_t4)/(2*_r4);const _C4=(2*Math.sqrt(_v4)*alpha);
const _D4=_A4+_C4;const _a4=2*(_x4-_y4);const _b4=_A4-_C4;const _c4=_v4*(_B4+_C4);const _d4=-2*_v4*(_x4+_y4);const _e4=_v4*(_B4-_C4);this._a4=_a4/_D4;this._b4=_b4/_D4;this._c4=_c4/_D4;this._d4=_d4/_D4;this._e4=_e4/_D4;this._j4=_q4;this._k4=_r4;this._l4=_s4;}}registerProcessor("hi-shelf-processor",_84);class _E4 extends AudioWorkletProcessor{static get parameterDescriptors(){const _F4=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"cutoff",
automationRate:"a-rate",defaultValue:Math.min(1500.0,_F4),minValue:10.0,maxValue:_F4},{name:"q",automationRate:"a-rate",defaultValue:1.5,minValue:1.0,maxValue:100.0}];}constructor(_23){super();this._N2();const _33=_23.outputChannelCount[0];this._a4=0;this._b4=0;this._c4=0;this._d4=0;this._e4=0;this._f4=new Float32Array(_33);this._g4=new Float32Array(_33);this._h4=new Float32Array(_33);this._i4=new Float32Array(_33);this._G4=-1;this._k4=-1;}process(_R2,_S2,parameters){const input=_R2[0];const output=_S2[0];
const bypass=parameters.bypass;const cutoff=parameters.cutoff;const q=parameters.q;const _m4=(cutoff.length===1&&q.length===1);if(_m4)this._n4(cutoff[0],q[0]);for(let c=0;c<input.length;++c){const _T2=input[c];const _Z2=output[c];for(let _U2=0;_U2<_T2.length;++_U2){if(_m4===false){const c=(cutoff[_U2]!==undefined)?cutoff[_U2]:cutoff[0];const _o4=(q[_U2]!==undefined)?q[_U2]:q[0];this._n4(c,_o4);}const _p4=this._c4*_T2[_U2]+this._d4*this._f4[c]+this._e4*this._g4[c]-this._a4*this._h4[c]-this._b4*this._i4[c];this._g4[c]=this._f4[c];
this._f4[c]=_T2[_U2];this._i4[c]=this._h4[c];this._h4[c]=_p4;const _V2=(bypass[_U2]!==undefined)?bypass[_U2]:bypass[0];_Z2[_U2]=(_V2>0)?_T2[_U2]:_p4;}}return this._O2;}_n4(_H4,_r4){if(_H4===this._G4&&_r4===this._k4)return;const _t4=2*Math.PI*_H4/sampleRate;const alpha=Math.sin(_t4)/(2*_r4);const _u4=Math.cos(_t4);const _D4=1+alpha;const _a4=-2*_u4;const _b4=1-alpha;const _c4=(1+_u4)/2;const _d4=-1-_u4;const _e4=(1+_u4)/2;this._a4=_a4/_D4;this._b4=_b4/_D4;this._c4=_c4/_D4;this._d4=_d4/_D4;this._e4=_e4/_D4;this._G4=_H4;
this._k4=_r4;}}registerProcessor("hpf2-processor",_E4);class _I4 extends AudioWorkletProcessor{static get parameterDescriptors(){const _94=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(500.0,_94),minValue:10.0,maxValue:_94},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}
constructor(_23){super();this._N2();const _33=_23.outputChannelCount[0];this._a4=0;this._b4=0;this._c4=0;this._d4=0;this._e4=0;this._f4=new Float32Array(_33);this._g4=new Float32Array(_33);this._h4=new Float32Array(_33);this._i4=new Float32Array(_33);this._j4=-1;this._k4=-1;this._l4=-1;}process(_R2,_S2,parameters){const input=_R2[0];const output=_S2[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _m4=(freq.length===1&&q.length===1&&gain.length===1);
if(_m4)this._n4(freq[0],q[0],gain[0]);for(let c=0;c<input.length;++c){const _T2=input[c];const _Z2=output[c];for(let _U2=0;_U2<_T2.length;++_U2){if(_m4===false){const _63=(freq[_U2]!==undefined)?freq[_U2]:freq[0];const _o4=(q[_U2]!==undefined)?q[_U2]:q[0];const __2=(gain[_U2]!==undefined)?gain[_U2]:gain[0];this._n4(_63,_o4,__2);}const _p4=this._c4*_T2[_U2]+this._d4*this._f4[c]+this._e4*this._g4[c]-this._a4*this._h4[c]-this._b4*this._i4[c];this._g4[c]=this._f4[c];this._f4[c]=_T2[_U2];this._i4[c]=this._h4[c];
this._h4[c]=_p4;const _V2=(bypass[_U2]!==undefined)?bypass[_U2]:bypass[0];_Z2[_U2]=(_V2>0)?_T2[_U2]:_p4;}}return this._O2;}_n4(_q4,_r4,_s4){if(_q4===this._j4&&_r4===this._k4&&_s4===this._l4)return;const _t4=2*Math.PI*_q4/sampleRate;const _u4=Math.cos(_t4);const _v4=Math.sqrt(_s4);const _w4=_v4+1;const _x4=_v4-1;const _y4=_w4*_u4;const _z4=_x4*_u4;const _A4=_w4-_z4;const _B4=_w4+_z4;const alpha=Math.sin(_t4)/(2*_r4);const _C4=(2*Math.sqrt(_v4)*alpha);const _D4=_B4+_C4;const _a4=-2*(_x4+_y4);const _b4=_B4-_C4;const _c4=_v4*(_A4+_C4);
const _d4=2*_v4*(_x4-_y4);const _e4=_v4*(_A4-_C4);this._a4=_a4/_D4;this._b4=_b4/_D4;this._c4=_c4/_D4;this._d4=_d4/_D4;this._e4=_e4/_D4;this._j4=_q4;this._k4=_r4;this._l4=_s4;}}registerProcessor("lo-shelf-processor",_I4);class _J4 extends AudioWorkletProcessor{static get parameterDescriptors(){const _F4=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"cutoff",automationRate:"a-rate",defaultValue:Math.min(500.0,_F4),minValue:10.0,maxValue:_F4}
,{name:"q",automationRate:"a-rate",defaultValue:1.5,minValue:1.0,maxValue:100.0}];}constructor(_23){super();this._N2();const _33=_23.outputChannelCount[0];this._a4=0;this._b4=0;this._c4=0;this._d4=0;this._e4=0;this._f4=new Float32Array(_33);this._g4=new Float32Array(_33);this._h4=new Float32Array(_33);this._i4=new Float32Array(_33);this._G4=-1;this._k4=-1;}process(_R2,_S2,parameters){const input=_R2[0];const output=_S2[0];const bypass=parameters.bypass;const cutoff=parameters.cutoff;const q=parameters.q;const _m4=(cutoff.length===1&&q.length===1);
if(_m4)this._n4(cutoff[0],q[0]);for(let c=0;c<input.length;++c){const _T2=input[c];const _Z2=output[c];for(let _U2=0;_U2<_T2.length;++_U2){if(_m4===false){const c=(cutoff[_U2]!==undefined)?cutoff[_U2]:cutoff[0];const _o4=(q[_U2]!==undefined)?q[_U2]:q[0];this._n4(c,_o4);}const _p4=this._c4*_T2[_U2]+this._d4*this._f4[c]+this._e4*this._g4[c]-this._a4*this._h4[c]-this._b4*this._i4[c];this._g4[c]=this._f4[c];this._f4[c]=_T2[_U2];this._i4[c]=this._h4[c];this._h4[c]=_p4;const _V2=(bypass[_U2]!==undefined)?bypass[_U2]:bypass[0];
_Z2[_U2]=(_V2>0)?_T2[_U2]:_p4;}}return this._O2;}_n4(_H4,_r4){if(_H4===this._G4&&_r4===this._k4)return;const _t4=2*Math.PI*_H4/sampleRate;const alpha=Math.sin(_t4)/(2*_r4);const _u4=Math.cos(_t4);const _D4=1+alpha;const _a4=-2*_u4;const _b4=1-alpha;const _c4=(1-_u4)/2;const _d4=1-_u4;const _e4=(1-_u4)/2;this._a4=_a4/_D4;this._b4=_b4/_D4;this._c4=_c4/_D4;this._d4=_d4/_D4;this._e4=_e4/_D4;this._G4=_H4;this._k4=_r4;}}registerProcessor("lpf2-processor",_J4);class _K4 extends AudioWorkletProcessor{static get parameterDescriptors(){
const _94=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(1500.0,_94),minValue:10.0,maxValue:_94},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_23){super();this._N2();const _33=_23.outputChannelCount[0];this._a4=0;this._b4=0;this._c4=0;this._d4=0;this._e4=0;
this._f4=new Float32Array(_33);this._g4=new Float32Array(_33);this._h4=new Float32Array(_33);this._i4=new Float32Array(_33);this._j4=-1;this._k4=-1;this._l4=-1;}process(_R2,_S2,parameters){const input=_R2[0];const output=_S2[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _m4=(freq.length===1&&q.length===1&&gain.length===1);if(_m4)this._n4(freq[0],q[0],gain[0]);for(let c=0;c<input.length;++c){const _T2=input[c];const _Z2=output[c];for(let _U2=0;
_U2<_T2.length;++_U2){if(_m4===false){const _63=(freq[_U2]!==undefined)?freq[_U2]:freq[0];const _o4=(q[_U2]!==undefined)?q[_U2]:q[0];const __2=(gain[_U2]!==undefined)?gain[_U2]:gain[0];this._n4(_63,_o4,__2);}const _p4=this._c4*_T2[_U2]+this._d4*this._f4[c]+this._e4*this._g4[c]-this._a4*this._h4[c]-this._b4*this._i4[c];this._g4[c]=this._f4[c];this._f4[c]=_T2[_U2];this._i4[c]=this._h4[c];this._h4[c]=_p4;const _V2=(bypass[_U2]!==undefined)?bypass[_U2]:bypass[0];_Z2[_U2]=(_V2>0)?_T2[_U2]:_p4;}}return this._O2;
}_n4(_q4,_r4,_s4){if(_q4===this._j4&&_r4===this._k4&&_s4===this._l4)return;const _t4=2*Math.PI*_q4/sampleRate;const _u4=Math.cos(_t4);const _v4=Math.sqrt(_s4);const alpha=Math.sin(_t4)/(2*_r4);const _L4=alpha/_v4;const _M4=alpha*_v4;const _D4=1+_L4;const _a4=-2*_u4;const _b4=1-_L4;const _c4=1+_M4;const _d4=_a4;const _e4=1-_M4;this._a4=_a4/_D4;this._b4=_b4/_D4;this._c4=_c4/_D4;this._d4=_d4/_D4;this._e4=_e4/_D4;this._j4=_q4;this._k4=_r4;this._l4=_s4;}}registerProcessor("peak-eq-processor",_K4);class _N4{constructor(_O4){
this._P4=0;this._Q4=0;this.feedback=0;this._R4=0;this.buffer=new Float32Array(_O4);this._S4=0;}process(_W3){const out=this.buffer[this._S4];this._R4=(this._R4*this._P4)+(out*this._Q4);this.buffer[this._S4]=_W3+(this._R4*this.feedback);++this._S4;this._S4%=this.buffer.length;return out;}_T4(_U4){this.feedback=Math.min(Math.max(0,_U4),1);}_V4(_W4){this._P4=Math.min(Math.max(0,_W4),1);this._Q4=1-this._P4;}}class _X4{constructor(_O4){this.feedback=0;this.buffer=new Float32Array(_O4);this._S4=0;}process(_W3){
const out=this.buffer[this._S4];this.buffer[this._S4]=_W3+(out*this.feedback);++this._S4;this._S4%=this.buffer.length;return(out-_W3);}_T4(_U4){this.feedback=Math.min(Math.max(0,_U4),1);}}class _Y4 extends AudioWorkletProcessor{static _Z4=8;static __4=4;static _05=0.015;static _15=0.4;static _25=0.28;static _35=0.7;static _45=[1116,1188,1277,1356,1422,1491,1557,1617];static _55=[1139,1211,1300,1379,1445,1514,1580,1640];static _65=[556,441,341,225];static _75=[579,464,364,248];static get parameterDescriptors(){return [{
name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"size",automationRate:"a-rate",defaultValue:0.7,minValue:0.0,maxValue:1.0},{name:"damp",automationRate:"a-rate",defaultValue:0.1,minValue:0.0,maxValue:1.0},{name:"mix",automationRate:"a-rate",defaultValue:0.35,minValue:0.0,maxValue:1.0}];}constructor(_23){super();this._N2();const _33=_23.outputChannelCount[0];this._85=-1;this._95=-1;this._a5=new Array(_33);this._b5=new Array(_33);const _c5=[_Y4._45,_Y4._55];const _d5=[_Y4._65,
_Y4._75];for(let c=0;c<_33;++c){this._a5[c]=new Array(_Y4._Z4);this._b5[c]=new Array(_Y4.__4);for(let i=0;i<_Y4._Z4;++i)this._a5[c][i]=new _N4(_c5[c%_c5.length][i]);for(let i=0;i<_Y4.__4;++i)this._b5[c][i]=new _X4(_d5[c%_d5.length][i]);}this._e5(0.5);this._V4(0.5);for(let c=0;c<_33;++c)for(let i=0;i<_Y4.__4;++i)this._b5[c][i]._T4(0.5);}process(_R2,_S2,parameters){const input=_R2[0];const output=_S2[0];const bypass=parameters.bypass;const size=parameters.size;const damp=parameters.damp;const mix=parameters.mix;
for(let c=0;c<input.length;++c){const _T2=input[c];const _Z2=output[c];for(let _f5=0;_f5<_T2.length;++_f5){const _U2=(size[_f5]!==undefined)?size[_f5]:size[0];const _g5=(damp[_f5]!==undefined)?damp[_f5]:damp[0];this._e5(_U2);this._V4(_g5);_Z2[_f5]=_T2[_f5];let out=0;const _73=_T2[_f5]*_Y4._05;for(let i=0;i<_Y4._Z4;++i)out+=this._a5[c][i].process(_73);for(let i=0;i<_Y4.__4;++i)out=this._b5[c][i].process(out);const _V2=(bypass[_f5]!==undefined)?bypass[_f5]:bypass[0];if(_V2>0.0){continue;}const _93=(mix[_f5]!==undefined)?mix[_f5]:mix[0];
_Z2[_f5]*=(1-_93);_Z2[_f5]+=(out*_93);}}return this._O2;}_e5(_O4){if(_O4===this._85)return;const size=(_O4*_Y4._25)+_Y4._35;for(let c=0;c<this._a5.length;++c)for(let i=0;i<_Y4._Z4;++i)this._a5[c][i]._T4(size);this._85=_O4;}_V4(_W4){if(_W4===this._95)return;const damp=_W4*_Y4._15;for(let c=0;c<this._a5.length;++c)for(let i=0;i<_Y4._Z4;++i)this._a5[c][i]._V4(damp);this._95=_W4;}}registerProcessor("reverb1-processor",_Y4);class _h5 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",
automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"rate",automationRate:"a-rate",defaultValue:5.0,minValue:0.0,maxValue:20.0},{name:"intensity",automationRate:"a-rate",defaultValue:1.0,minValue:0.0,maxValue:1.0},{name:"offset",automationRate:"a-rate",defaultValue:0.0,minValue:0.0,maxValue:1.0},{name:"shape",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:4}];}constructor(_23){super();this._N2();const _33=_23.outputChannelCount[0];this._i5=new Array(_33).fill(1.0);this._j5=new Array(_33).fill(0.0);
this._k5=new Array(_33).fill(_l5._m5._n5);this._o5=new Array(_33);for(let c=0;c<_33;++c){this._o5[c]=new _p5();this._o5[c]._q5(sampleRate);this._o5[c]._r5(this._i5[c]);this._o5[c]._s5(this._k5[c]);if(c%2===1){this._o5[c]._t5(this._j5[c]);}}}process(_R2,_S2,parameters){const input=_R2[0];const output=_S2[0];const bypass=parameters.bypass;const rate=parameters.rate;const intensity=parameters.intensity;const offset=parameters.offset;const shape=parameters.shape;for(let c=0;c<input.length;++c){const _T2=input[c];
const _Z2=output[c];for(let _U2=0;_U2<_T2.length;++_U2){_Z2[_U2]=_T2[_U2];const _83=(rate[_U2]!==undefined)?rate[_U2]:rate[0];const _u5=(offset[_U2]!==undefined)?offset[_U2]:offset[0];const _v5=(shape[_U2]!==undefined)?shape[_U2]:shape[0];this._w5(c,_83,_u5,_v5);const _x5=this._o5[c]._O3();const _V2=(bypass[_U2]!==undefined)?bypass[_U2]:bypass[0];if(_V2>0.0){continue;}const i=(intensity[_U2]!==undefined)?intensity[_U2]:intensity[0];const out=_T2[_U2]*_x5*i;_Z2[_U2]*=(1.0-i);_Z2[_U2]+=out;}}return this._O2;
}_w5(_Q3,_y5,_z5,_A5){if(_y5!==this._i5[_Q3]){this._o5[_Q3]._r5(_y5);this._i5[_Q3]=_y5;}if(_z5!==this._j5[_Q3]){if(_Q3%2===1){this._o5[_Q3]._t5(_z5);}this._j5[_Q3]=_z5;}if(_A5!==this._k5[_Q3]){this._o5[_Q3]._s5(_A5);this._k5[_Q3]=_A5;}}}registerProcessor("tremolo-processor",_h5);function _l5(){}_l5._m5={_n5:0,_B5:1,_C5:2,_D5:3,_E5:4,_F5:5};_l5._G5=function(_H5){return 1.0-_H5;};_l5._I5=function(_H5){return _H5;};_l5._J5=function(_H5){return 0.5*(Math.sin((_H5*2.0*Math.PI)-(Math.PI/2.0))+1.0);};_l5._K5=function(_H5){
if(_H5<0.5){return 0.0;}return 1.0;};_l5._L5=function(_H5){if(_H5<0.5){return 2.0*_H5;}return 2.0-(2.0*_H5);};_l5._M5=[_l5._G5,_l5._I5,_l5._J5,_l5._K5,_l5._L5];_N5._O5=512;_N5._P5=1.0/_N5._O5;function _N5(_Q5){this.data=new Float32Array(_N5._O5);for(let i=0;i<_N5._O5;++i){this.data[i]=_Q5(i*_N5._P5);}}_N5.prototype._O3=function(_H5){_H5=Math.max(0.0,_H5);_H5=Math.min(_H5,1.0);const _R5=_H5*_N5._O5;const _S5=~~_R5;const _T5=_R5-_S5;let _S3=_S5;let _T3=_S3+1;if(_S3>=_N5._O5){_S3-=_N5._O5;}if(_T3>=_N5._O5){_T3-=_N5._O5;
}const _U3=this.data[_S3];const _V3=this.data[_T3];return _U3+(_V3-_U3)*_T5;};_p5._U5=[];_p5._V5=false;_p5._W5=0.0;_p5._94=20.0;function _p5(){this._X5=48000;this.shape=_l5._m5._C5;this.freq=1.0;this._Y5=0.0;this._P5=0.0;this._Z5=0.0;if(_p5._V5==true){return;}for(let i=0;i<_l5._m5._F5;++i){_p5._U5[i]=new _N5(_l5._M5[i]);}_p5._V5=true;}_p5.__5=function(){return(_p5._V5==true);};_p5.prototype._q5=function(_06){this._X5=_06;this._16();};_p5.prototype._r5=function(_q4){_q4=Math.max(_p5._W5,_q4);_q4=Math.min(_q4,
_p5._94);this.freq=_q4;this._16();};_p5.prototype._t5=function(_z5){_z5=Math.max(0.0,_z5);_z5=Math.min(_z5,1.0);const _26=_z5-this._Z5;this._Z5=_z5;this._Y5+=_26;while(this._Y5>=1.0){this._Y5-=1.0;}while(this._Y5<0.0){this._Y5+=1.0;}};_p5.prototype._s5=function(_A5){_A5=Math.max(0,_A5);_A5=Math.min(_A5,_l5._m5._F5-1);this.shape=_A5;};_p5.prototype._O3=function(){const result=_p5._U5[this.shape]._O3(this._Y5);this._Y5+=this._P5;while(this._Y5>=1.0){this._Y5-=1.0;}return result;};_p5.prototype._16=function(){
this._P5=this.freq/this._X5;};